% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gpkg-lazy.frame.R
\name{lazy.frame}
\alias{lazy.frame}
\alias{lazy.frame.character}
\alias{lazy.frame.geopackage}
\alias{dplyr.frame}
\alias{dplyr.frame.character}
\alias{dplyr.frame.geopackage}
\title{Lazy Access to Table Information}
\usage{
lazy.frame(x, table_name = NULL, ...)

\method{lazy.frame}{character}(x, table_name = NULL, ...)

\method{lazy.frame}{geopackage}(x, table_name = NULL, ...)

dplyr.frame(x, table_name, ...)

\method{dplyr.frame}{character}(x, table_name, ...)

\method{dplyr.frame}{geopackage}(x, table_name, ...)
}
\arguments{
\item{x}{A geopackage object or character path to GeoPcakge}

\item{table_name}{One or more table names; for \code{lazy.frame()} if \code{table_name=NULL} returns a record for each table. \code{dplyr.frame()} requires \code{table_name} be specified}

\item{...}{Additional arguments. In \code{dplyr.frame()} arguments in \code{...} are passed to \code{dplyr::tbl()}. For \code{lazy.frame()}, \code{...} arguments are (currently) not used.}
}
\description{
\code{lazy.frame()}: Get information on a table in a GeoPackage (without returning the whole table).

\code{dplyr.frame()}: access a specific table (by name) and get a "lazy" \code{tibble} object referencing that table
}
\examples{
\dontshow{if (!inherits(try(requireNamespace("RSQLite", quietly = TRUE)), 'try-error') &&!inherits(try(requireNamespace("dbplyr", quietly = TRUE)), 'try-error') && !inherits(try(requireNamespace("terra", quietly = TRUE)), 'try-error')) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
\dontshow{\}) # examplesIf}

tf <- tempfile(fileext = ".gpkg")

r <- terra::rast(system.file("extdata", "dem.tif", package = "gpkg"))

gpkg_write(r,
           destfile = tf,
           RASTER_TABLE = "DEM1",
           FIELD_NAME = "Elevation")

gpkg_write(r,
           destfile = tf,
           append = TRUE,
           RASTER_TABLE = "DEM2",
           FIELD_NAME = "Elevation")

g <- geopackage(tf)

# inspect gpkg_contents table
dplyr.frame(g, "gpkg_contents")

# materialize a data.frame from gpkg_2d_gridded_tile_ancillary
library(dplyr, warn.conflicts = FALSE)

dplyr.frame(g, "gpkg_2d_gridded_tile_ancillary") \%>\% 
  dplyr::filter(tpudt_name == "DEM2") \%>\% 
  dplyr::select(mean, std_dev) \%>\% 
  dplyr::collect()
}
